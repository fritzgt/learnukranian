//
//  NetworkManager.swift
//  Learn Ukranian
//
//  Created by FGT MAC on 12/21/19.
//  Copyright Â© 2019 FGT MAC. All rights reserved.
//

import Foundation
// 1. Import FireBase
import Firebase

class NetworkManager: ObservableObject {
    
    //Initializing Firestore
    let db = Firestore.firestore()
    
    //initializing array of instances of Categories
    @Published var dataCat: [Categories] = []
    
    
    
    //Method to create query base on the collection being requested
    //THis will allow the reuse of the loadData method
    func createQuery(collection: String, id: String?) {
        
        switch collection {
        case "subcat":
            let query = db.collection(collection)
                .whereField("catid", isEqualTo: id!)
            return loadData(query: query)
        case "categories":
            let query = db.collection(collection)
            return loadData(query: query)
        default:
            let query = db.collection("categories")
            return loadData(query: query)
        }
    }
    
    //Method to get the data from firestore DB
    func loadData(query: Query) {
        //after removing post switch addSnapshotListener to getDocuments
        query.order(by: "title").addSnapshotListener() { (querySnapshot, err) in
            if let err = err {
                print("Error getting documents: \(err)")
            } else {
                
                self.dataCat = []
                //unwraping
                for document in querySnapshot!.documents {
                    
                    // print("\(document.documentID) => \(document.data())")
                    
                    let data = document.data()
                    
                    //Use the autogenerated ID from
                    //firestore for Identifiable protocol
                    let indeID = document.documentID
                    //Unwraping and downcasting
                    if let title = data["title"] as?  String,
                        let image = data["image"] as? String,
                        let trans = data["trans"] as?  String,
                        let pron = data["pron"] as?  String,
                        let catid = data["catid"] as? String
                    {
                        let newCat = Categories(id: indeID, title: title, trans: trans, pron: pron, image: image, catid: catid)
                        
                        //Appending new instances to the array
                        self.dataCat.append(newCat)
                        //print("Data from loadData \(newCat)")
                    }
                }
                print("Completed Array \(self.dataCat)")
            }
        }
    }
    
}
